diff --git a/test.sh b/test.sh
new file mode 100755
index 0000000..e2a5741
--- /dev/null
+++ b/test.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+set -euo pipefail
+
+case "" in
+  base)
+    pytest tests/test_type_conversion.py -q
+    ;;
+  new)
+    pytest tests/test_discovery_auto.py -q
+    ;;
+  *)
+    echo "Usage: ./test.sh {base|new}"
+    exit 1
+    ;;
+esac
diff --git a/tests/assets/discovery_package/__init__.py b/tests/assets/discovery_package/__init__.py
new file mode 100644
index 0000000..712a679
--- /dev/null
+++ b/tests/assets/discovery_package/__init__.py
@@ -0,0 +1,5 @@
+"""Auxiliary package used by discovery tests."""
+
+from __future__ import annotations
+
+__all__ = ["users", "inventory", "failing"]
diff --git a/tests/assets/discovery_package/failing.py b/tests/assets/discovery_package/failing.py
new file mode 100644
index 0000000..7d08966
--- /dev/null
+++ b/tests/assets/discovery_package/failing.py
@@ -0,0 +1,5 @@
+"""Module that fails at import time for discovery error handling tests."""
+
+from __future__ import annotations
+
+raise RuntimeError("synthetic failure during discovery")
diff --git a/tests/assets/discovery_package/inventory/__init__.py b/tests/assets/discovery_package/inventory/__init__.py
new file mode 100644
index 0000000..50ddde8
--- /dev/null
+++ b/tests/assets/discovery_package/inventory/__init__.py
@@ -0,0 +1,14 @@
+"""Nested package used to exercise discovery of Typer groups."""
+
+from __future__ import annotations
+
+import typer
+
+app = typer.Typer()
+
+
+@app.command()
+def summary() -> None:
+    """Emit a fixed inventory summary value."""
+
+    typer.echo("inventory summary: 2 items")
diff --git a/tests/assets/discovery_package/inventory/audit.py b/tests/assets/discovery_package/inventory/audit.py
new file mode 100644
index 0000000..b614e3b
--- /dev/null
+++ b/tests/assets/discovery_package/inventory/audit.py
@@ -0,0 +1,14 @@
+"""Nested module for discovery tests."""
+
+from __future__ import annotations
+
+import typer
+
+app = typer.Typer()
+
+
+@app.command()
+def run(level: int = typer.Argument(1)) -> None:
+    """Emit a diagnostic message with the requested audit level."""
+
+    typer.echo(f"inventory audit level {level}")
diff --git a/tests/assets/discovery_package/users.py b/tests/assets/discovery_package/users.py
new file mode 100644
index 0000000..d611635
--- /dev/null
+++ b/tests/assets/discovery_package/users.py
@@ -0,0 +1,21 @@
+"""Sample command module discovered by tests."""
+
+from __future__ import annotations
+
+import typer
+
+app = typer.Typer()
+
+
+@app.command()
+def create(name: str) -> None:
+    """Emit a greeting for the supplied user."""
+
+    typer.echo(f"created user {name}")
+
+
+@app.command()
+def deactivate(name: str) -> None:
+    """Report deactivated user."""
+
+    typer.echo(f"deactivated user {name}")
diff --git a/tests/assets/discovery_targets/__init__.py b/tests/assets/discovery_targets/__init__.py
new file mode 100644
index 0000000..e0d0c53
--- /dev/null
+++ b/tests/assets/discovery_targets/__init__.py
@@ -0,0 +1,5 @@
+"""Auxiliary package for discovery tests without failing modules."""
+
+from __future__ import annotations
+
+__all__ = ["users", "inventory"]
\ No newline at end of file
diff --git a/tests/assets/discovery_targets/inventory/__init__.py b/tests/assets/discovery_targets/inventory/__init__.py
new file mode 100644
index 0000000..ed26699
--- /dev/null
+++ b/tests/assets/discovery_targets/inventory/__init__.py
@@ -0,0 +1,14 @@
+"""Nested package used to exercise discovery of Typer groups."""
+
+from __future__ import annotations
+
+import typer
+
+app = typer.Typer()
+
+
+@app.command()
+def summary() -> None:
+    """Emit a fixed inventory summary value."""
+
+    typer.echo("inventory summary: 2 items")
\ No newline at end of file
diff --git a/tests/assets/discovery_targets/inventory/audit.py b/tests/assets/discovery_targets/inventory/audit.py
new file mode 100644
index 0000000..b614e3b
--- /dev/null
+++ b/tests/assets/discovery_targets/inventory/audit.py
@@ -0,0 +1,14 @@
+"""Nested module for discovery tests."""
+
+from __future__ import annotations
+
+import typer
+
+app = typer.Typer()
+
+
+@app.command()
+def run(level: int = typer.Argument(1)) -> None:
+    """Emit a diagnostic message with the requested audit level."""
+
+    typer.echo(f"inventory audit level {level}")
diff --git a/tests/assets/discovery_targets/users.py b/tests/assets/discovery_targets/users.py
new file mode 100644
index 0000000..576ffad
--- /dev/null
+++ b/tests/assets/discovery_targets/users.py
@@ -0,0 +1,21 @@
+"""Sample command module discovered by tests."""
+
+from __future__ import annotations
+
+import typer
+
+app = typer.Typer()
+
+
+@app.command()
+def create(name: str) -> None:
+    """Emit a greeting for the supplied user."""
+
+    typer.echo(f"created user {name}")
+
+
+@app.command()
+def deactivate(name: str) -> None:
+    """Report deactivated user."""
+
+    typer.echo(f"deactivated user {name}")
\ No newline at end of file
diff --git a/tests/test_discovery_auto.py b/tests/test_discovery_auto.py
new file mode 100644
index 0000000..82bea69
--- /dev/null
+++ b/tests/test_discovery_auto.py
@@ -0,0 +1,156 @@
+"""Tests defining the contract for automatic Typer command discovery."""
+
+from __future__ import annotations
+
+import importlib
+
+import click
+import pytest
+import typer
+from typer.main import get_command
+from typer.testing import CliRunner
+
+from typer.discovery import TyperDiscoveryError, register_package
+
+
+runner = CliRunner()
+
+TARGET_PACKAGE = "tests.assets.discovery_targets"
+FAILING_PACKAGE = "tests.assets.discovery_package"
+FAILING_MODULE = f"{FAILING_PACKAGE}.failing"
+
+
+def invoke(app: typer.Typer, *args: str) -> str:
+    result = runner.invoke(app, list(args))
+    assert result.exit_code == 0, result.output
+    return result.output
+
+
+def command_names(app: typer.Typer) -> list[str]:
+    click_command = get_command(app)
+    ctx = click.Context(click_command)
+    return click_command.list_commands(ctx)
+
+
+def test_register_package_discovers_modules() -> None:
+    app = typer.Typer()
+    package = importlib.import_module(TARGET_PACKAGE)
+
+    register_package(app, package)
+
+    output = invoke(app, "users", "create", "Ada")
+    assert "created user Ada" in output
+
+    nested = invoke(app, "inventory", "summary")
+    assert "inventory summary" in nested
+
+    audit = invoke(app, "inventory", "audit", "run", "3")
+    assert "inventory audit level 3" in audit
+
+
+def test_register_package_namespace_prefix() -> None:
+    app = typer.Typer()
+    package = importlib.import_module(TARGET_PACKAGE)
+
+    register_package(app, package, namespace="ops")
+
+    namespaced = invoke(app, "ops", "users", "deactivate", "Neo")
+    assert "deactivated user Neo" in namespaced
+
+
+def test_register_package_filters_scope() -> None:
+    app = typer.Typer()
+    package = importlib.import_module(TARGET_PACKAGE)
+
+    register_package(app, package, filters=["inventory.*"])
+
+    invoke(app, "inventory", "audit", "run")
+
+    missing = runner.invoke(app, ["users", "create", "Eve"])
+    assert missing.exit_code != 0
+    assert "No such command 'users'" in missing.output
+
+
+def test_register_package_surfaces_import_failures_with_module_name() -> None:
+    app = typer.Typer()
+    package = importlib.import_module(FAILING_PACKAGE)
+
+    with pytest.raises(TyperDiscoveryError) as excinfo:
+        register_package(app, package)
+
+    message = str(excinfo.value)
+    assert message == f"Failed to import module '{FAILING_MODULE}'"
+
+
+def test_register_package_is_idempotent() -> None:
+    app = typer.Typer()
+    package = importlib.import_module(TARGET_PACKAGE)
+
+    register_package(app, package)
+    register_package(app, package)
+
+    names = command_names(app)
+    assert names.count("users") == 1
+    assert names.count("inventory") == 1
+
+    output = invoke(app, "users", "create", "Ada")
+    assert "created user Ada" in output
+
+
+def test_register_package_preserves_manual_commands() -> None:
+    app = typer.Typer()
+
+    @app.command()
+    def manual(name: str) -> None:
+        typer.echo(f"manual {name}")
+
+    package = importlib.import_module(TARGET_PACKAGE)
+
+    register_package(app, package, namespace="ops")
+
+    manual_output = invoke(app, "manual", "Casey")
+    assert "manual Casey" in manual_output
+
+    namespaced = invoke(app, "ops", "users", "create", "Zoe")
+    assert "created user Zoe" in namespaced
+
+
+def test_register_package_handles_name_collisions() -> None:
+    app = typer.Typer()
+
+    @app.command()
+    def users() -> None:
+        typer.echo("manual users command")
+
+    package = importlib.import_module(TARGET_PACKAGE)
+
+    with pytest.raises(TyperDiscoveryError):
+        register_package(app, package)
+
+    register_package(app, package, namespace="pkg")
+
+    manual_output = invoke(app, "users")
+    assert "manual users command" in manual_output
+
+    namespaced = invoke(app, "pkg", "users", "create", "Ana")
+    assert "created user Ana" in namespaced
+
+
+def test_register_package_filters_can_skip_failing_modules() -> None:
+    package = importlib.import_module(FAILING_PACKAGE)
+
+    unfiltered_app = typer.Typer()
+    with pytest.raises(TyperDiscoveryError) as excinfo:
+        register_package(unfiltered_app, package)
+
+    assert str(excinfo.value) == f"Failed to import module '{FAILING_MODULE}'"
+
+    filtered_app = typer.Typer()
+    register_package(filtered_app, package, filters=["users", "inventory.*"])
+
+    invoke(filtered_app, "users", "create", "Rory")
+    summary = invoke(filtered_app, "inventory", "summary")
+    assert "inventory summary" in summary
+
+    audit = invoke(filtered_app, "inventory", "audit", "run", "4")
+    assert "inventory audit level 4" in audit
